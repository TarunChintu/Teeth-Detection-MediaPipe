# -*- coding: utf-8 -*-
"""functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ENe_9cwiijdjs7A1mVwsoi22BHLe1fZG
"""

#functions

DESIRED_HEIGHT = 1024
DESIRED_WIDTH = 1024

#function to get unqiue indices

def get_unique(c):
  temp_list=list(c)
  temp_set = set()
  for t in temp_list:
    temp_set.add(t[0])
    temp_set.add(t[1])
  return list(temp_set)


#function to resize the image
def resize_and_show(image):
  h, w = image.shape[:2]
  if h < w:
    img = cv2.resize(image, (DESIRED_WIDTH, math.floor(h/(w/DESIRED_WIDTH))))
  else:
    img = cv2.resize(image, (math.floor(w/(h/DESIRED_HEIGHT)), DESIRED_HEIGHT))
  #cv2_imshow(img)



def tooth_detector(image):



 try:

      mp_face_mesh = mp.solutions.face_mesh

      #to access the points on the lips
      connections_lips = mp_face_mesh.FACEMESH_LIPS
      lips_indices = get_unique(connections_lips)
      #print(len(lips_indices))
      #print(lips_indices) #to print the dected indices

      with mp_face_mesh.FaceMesh(
          static_image_mode=False,
          refine_landmarks=True,
          max_num_faces=1,
          min_detection_confidence=0.5) as face_mesh:
        annotated_image = image.copy()
        results = face_mesh.process(cv2.cvtColor(image , cv2.COLOR_BGR2RGB))
        #print(results.multi_face_landmarks) #to print all land marks
        for face_landmark in results.multi_face_landmarks:
          lms=face_landmark.landmark
          d={}
          for index in lips_indices:
            #print(lms[index]) gives the dimensions of all land marks
            x = int(lms[index].x*image.shape[1])
            y = int(lms[index].y*image.shape[0])
            d[index] = (x,y)



          U=math.dist(d[0],d[13]) #length of the upper lip
          #print(U)
          L = math.dist(d[14],d[17]) #length of the lower lip
          #print(L)
          gap =  math.dist(d[0],d[17]) #distance between the lips
          #print(gap)

          if gap > (L+U+(L/2)):
            #print(name)
            #print(U)
            #print(L)
            #print(gap)
            return "True"
          else:
            return "False"

 except Exception as e:
   return "False"